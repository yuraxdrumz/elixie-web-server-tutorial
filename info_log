{"timestamp":"2019-03-21 14:33:08.585","message":"GenServer Remix.Worker terminating\n** (FunctionClauseError) no function clause matching in Remix.Worker.handle_info/2\n    (remix) lib/remix.ex:30: Remix.Worker.handle_info({:timed_out, #PID<0.1047.0>}, %Remix.Worker.State{last_mtime: nil})\n    (stdlib) gen_server.erl:637: :gen_server.try_dispatch/4\n    (stdlib) gen_server.erl:711: :gen_server.handle_msg/6\n    (stdlib) proc_lib.erl:249: :proc_lib.init_p_do_apply/3\nLast message: {:timed_out, #PID<0.1047.0>}\nState: %Remix.Worker.State{last_mtime: nil}","level":"error"}
{"timestamp":"2019-03-21 14:38:12.442","message":"#PID<0.1328.0> running SimpleServer.Router (cowboy_protocol) terminated\nServer: localhost:4000 (http)\nRequest: POST /user\n** (exit) an exception was raised:\n    ** (UndefinedFunctionError) function SimpleServer.Router.call/2 is undefined (module SimpleServer.Router is not available)\n        (simple_server) SimpleServer.Router.call(%Plug.Conn{adapter: {Plug.Adapters.Cowboy.Conn, :...}, assigns: %{}, before_send: [], body_params: %Plug.Conn.Unfetched{aspect: :body_params}, cookies: %Plug.Conn.Unfetched{aspect: :cookies}, halted: false, host: \"localhost\", method: \"POST\", owner: #PID<0.1328.0>, params: %Plug.Conn.Unfetched{aspect: :params}, path_info: [\"user\"], path_params: %{}, port: 4000, private: %{}, query_params: %Plug.Conn.Unfetched{aspect: :query_params}, query_string: \"\", remote_ip: {127, 0, 0, 1}, req_cookies: %Plug.Conn.Unfetched{aspect: :cookies}, req_headers: [{\"host\", \"localhost:4000\"}, {\"user-agent\", \"insomnia/6.3.2\"}, {\"content-type\", \"application/json\"}, {\"accept\", \"*/*\"}, {\"content-length\", \"0\"}], request_path: \"/user\", resp_body: nil, resp_cookies: %{}, resp_headers: [{\"cache-control\", \"max-age=0, private, must-revalidate\"}], scheme: :http, script_name: [], secret_key_base: nil, state: :unset, status: nil}, [])\n        (plug_cowboy) lib/plug/cowboy/handler.ex:18: Plug.Adapters.Cowboy.Handler.upgrade/4\n        (cowboy) src/cowboy_protocol.erl:442: :cowboy_protocol.execute/4","level":"error"}
{"timestamp":"2019-03-21 14:38:17.118","message":"GenServer Remix.Worker terminating\n** (FunctionClauseError) no function clause matching in Remix.Worker.handle_info/2\n    (remix) lib/remix.ex:30: Remix.Worker.handle_info({:timed_out, #PID<0.1237.0>}, %Remix.Worker.State{last_mtime: nil})\n    (stdlib) gen_server.erl:637: :gen_server.try_dispatch/4\n    (stdlib) gen_server.erl:711: :gen_server.handle_msg/6\n    (stdlib) proc_lib.erl:249: :proc_lib.init_p_do_apply/3\nLast message: {:timed_out, #PID<0.1237.0>}\nState: %Remix.Worker.State{last_mtime: nil}","level":"error"}
{"timestamp":"2019-03-21 14:39:01.273","message":"GenServer Remix.Worker terminating\n** (FunctionClauseError) no function clause matching in Remix.Worker.handle_info/2\n    (remix) lib/remix.ex:30: Remix.Worker.handle_info({:timed_out, #PID<0.1381.0>}, %Remix.Worker.State{last_mtime: nil})\n    (stdlib) gen_server.erl:637: :gen_server.try_dispatch/4\n    (stdlib) gen_server.erl:711: :gen_server.handle_msg/6\n    (stdlib) proc_lib.erl:249: :proc_lib.init_p_do_apply/3\nLast message: {:timed_out, #PID<0.1381.0>}\nState: %Remix.Worker.State{last_mtime: nil}","level":"error"}
{"timestamp":"2019-03-21 14:41:55.246","request_id":"2m6vjjqbbvb42sp06k000hd1","message":"[]","level":"info"}
{"timestamp":"2019-03-21 14:42:08.834","request_id":"2m6vjkjlii7828t5gs000hm1","message":"[]","level":"info"}
{"timestamp":"2019-03-21 14:42:23.361","request_id":"2m6vjlempkho26qip4000fh2","message":"[]","level":"info"}
{"timestamp":"2019-03-21 14:42:23.901","request_id":"2m6vjlfncup426qip4000i01","message":"[]","level":"info"}
{"timestamp":"2019-03-21 14:42:28.684","request_id":"2m6vjlokbvro26qip4000i11","message":"[]","level":"info"}
{"timestamp":"2019-03-21 14:44:51.841","message":"Setting Ranch options together with socket options is deprecated. Please use the new map syntax that allows specifying socket options separately from other options.\n","level":"warn"}
{"timestamp":"2019-03-21 14:44:51.841","message":"Starting application...","level":"info"}
{"timestamp":"2019-03-21 14:45:53.383","request_id":"2m6vk1lsvbq009bmeg000121","message":"[]","level":"info"}
